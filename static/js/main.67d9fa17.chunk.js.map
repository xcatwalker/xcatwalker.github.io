{"version":3,"sources":["Router/AsyncComponent.js","Router/Router.js","App/App.js","serviceWorker.js","index.js"],"names":["asyncComponent","importComponent","props","state","component","default","this","setState","C","Component","AboutReact","CreatReactWithTable","RouterClass","exact","path","SubMenu","Header","Content","Sider","App","changeMenuItem","e","key","siderlist","title","submenu","defaultSelectedKeys","defaultOpenKeys","ref","list","mode","style","height","borderRight","map","c","k","_c","_k","Item","href","className","onClick","width","renderSiderList","padding","margin","minHeight","background","Router","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.67d9fa17.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\n\r\nexport default function asyncComponent(importComponent) {\r\n    class AsyncComponent extends Component {\r\n        constructor(props) {\r\n            super(props);\r\n\r\n            this.state = {\r\n                component: null\r\n            };\r\n        }\r\n\r\n        async componentDidMount() {\r\n            const {default: component} = await importComponent();\r\n\r\n            this.setState({\r\n                component: component\r\n            });\r\n        }\r\n\r\n        render() {\r\n            const C = this.state.component;\r\n\r\n            return C ? <C {...this.props} /> : null;\r\n        }\r\n    }\r\n\r\n    return AsyncComponent;\r\n}","import React from 'react'\r\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom'\r\nimport asyncComponent from './AsyncComponent.js'\r\n\r\nconst Home = asyncComponent(() => import('../Home/Home.js'));\r\nconst AboutReact  = asyncComponent(() => import('../AboutReact/AboutReact.js'));\r\nconst CreatReactWithTable  = asyncComponent(() => import('../AboutReact/CreatReactWithTable.js'));\r\n\r\nconst RouterClass = () => (\r\n    <Router>\r\n        <Switch>\r\n            <Route exact path=\"/\" component={AboutReact}/>\r\n            <Route exact path=\"/aboutReact/base\" component={AboutReact}/>\r\n            <Route exact path=\"/aboutReact/table\" component={CreatReactWithTable}/>\r\n        </Switch>\r\n    </Router>\r\n);\r\nexport default RouterClass\r\n","import React, {Component} from 'react';\r\nimport { Layout, Menu, Breadcrumb,Icon } from 'antd';\r\nimport { UserOutlined, LaptopOutlined, NotificationOutlined } from '@ant-design/icons';\r\n// import createhistory from 'history/createHashHistory';\r\nimport Router from \"../Router/Router\";\r\nimport './App.scss';\r\nconst { SubMenu } = Menu;\r\nconst { Header, Content, Sider } = Layout;\r\n\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n          siderlist : [{title:'新建',submenu:[{title:'基本',ref:'aboutReact/base'},{title:'基本table',ref:'aboutReact/table'}]},{title:'组件',submenu:[{title:'test1'},{title:'test2'}]}],\r\n          defaultSelectedKeys:['subItem00'],\r\n          defaultOpenKeys:['sub0']\r\n        };\r\n\r\n    }\r\n\r\n    componentWillMount() {\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    changeMenuItem=(e)=>{\r\n        switch (e.key) {\r\n            case '1':\r\n                this.setState({\r\n                    siderlist : [{title:'新建',submenu:[{title:'基本'},{title:'基本table'}]},{title:'组件',submenu:[{title:'test1'},{title:'test2'}]}],\r\n                    defaultSelectedKeys:['subItem00'],\r\n                    defaultOpenKeys:['sub0']\r\n                });\r\n                // this.props.history.push(`orderManagerDetil`)\r\n                break;\r\n            case '2':\r\n                this.setState({\r\n                    siderlist : [{title:'mooncell',submenu:[{title:'ruler'},{title:'saber'}]},{title:'wiki',submenu:[{title:'ttt'},{title:'sd'}]}],\r\n                    defaultSelectedKeys:['subItem00'],\r\n                    defaultOpenKeys:['sub0']\r\n                });\r\n                break;\r\n            case '3':\r\n\r\n                break;\r\n        }\r\n    };\r\n\r\n    renderSiderList(list){\r\n        const {defaultSelectedKeys,defaultOpenKeys} = this.state;\r\n      return  <Menu\r\n            mode=\"inline\"\r\n            defaultSelectedKeys={defaultSelectedKeys}\r\n            defaultOpenKeys={defaultOpenKeys}\r\n            style={{ height: '100%', borderRight: 0 }}\r\n        >\r\n          {\r\n              list.map((c,k)=>{\r\n                return  <SubMenu\r\n                    key={\"sub\"+k}\r\n                    title={\r\n                        <span>\r\n                            { c.title}\r\n                        </span>\r\n                    }\r\n                >\r\n                    {\r\n                        c.submenu && c.submenu.map((_c,_k)=>{\r\n                           return <Menu.Item key={`subItem${k}${_k}`}>\r\n                               {\r\n                                   _c.ref?\r\n                                       <a href={_c.ref?`#/${_c.ref}`:''}>{_c.title}</a>\r\n                                       :\r\n                                       <span>{_c.title}</span>\r\n                               }\r\n\r\n                               </Menu.Item>\r\n                        })\r\n                    }\r\n                </SubMenu>\r\n              })\r\n          }\r\n        </Menu>\r\n    }\r\n\r\n    render() {\r\n        const {siderlist} = this.state;\r\n        return (\r\n            <div>\r\n                <Header className='app-header'>\r\n                    <Menu  mode=\"horizontal\" defaultSelectedKeys={['1']} className='app-header-menu' onClick={this.changeMenuItem}>\r\n                        <Menu.Item key=\"1\" className='app-header-menu-item'><a href='#/aboutReact'>React</a></Menu.Item>\r\n                        <Menu.Item key=\"2\" className='app-header-menu-item'>nav 2</Menu.Item>\r\n                        <Menu.Item key=\"3\" className='app-header-menu-item'>nav 3</Menu.Item>\r\n                    </Menu>\r\n                </Header>\r\n                <Layout>\r\n\r\n                    <Sider width={200} className=\"site-layout-background\">\r\n                        {\r\n                            this.renderSiderList(siderlist)\r\n                        }\r\n                    </Sider>\r\n\r\n                    <Layout style={{ padding: '0 24px 24px' }}>\r\n                        <Content\r\n                            className=\"site-layout-background\"\r\n                            style={{\r\n                                padding: 24,\r\n                                margin: '24px 16px 0',\r\n                                minHeight: 280,\r\n                                height:\"100%\"\r\n                            }}\r\n                        >\r\n                            <div style={{padding: 24, background: '#fff', minHeight: 360}}>\r\n                                <Router/>\r\n                            </div>\r\n                        </Content>\r\n                    </Layout>\r\n\r\n\r\n\r\n                </Layout>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}