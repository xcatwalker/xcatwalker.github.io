{"version":3,"sources":["AboutReact/Test/Test.js"],"names":["React","require","QRCode","Demo","state","value","size","fgColor","bgColor","level","renderAs","includeMargin","includeImage","imageH","imageW","imageX","imageY","imageSrc","imageExcavate","centerImage","imageSettingsCode","this","code","type","onChange","e","setState","parseInt","target","checked","rows","cols","disabled","min","max","split","length","readOnly","imageSettings","src","height","width","x","y","excavate","Component"],"mappings":"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","file":"static/js/13.9c36f384.chunk.js","sourcesContent":["// var QRCode = require('..');\r\nvar React = require('react');\r\nvar QRCode = require('qrcode.react');\r\n// var ReactDOM = require('react-dom');\r\n\r\nexport default class Demo extends React.Component {\r\n    state = {\r\n        value: 'http://picturesofpeoplescanningqrcodes.tumblr.com/',\r\n        size: 128,\r\n        fgColor: '#000000',\r\n        bgColor: '#ffffff',\r\n        level: 'L',\r\n        renderAs: 'svg',\r\n        includeMargin: false,\r\n        includeImage: true,\r\n        imageH: 24,\r\n        imageW: 24,\r\n        imageX: 0,\r\n        imageY: 0,\r\n        imageSrc: 'https://static.zpao.com/favicon.png',\r\n        imageExcavate: true,\r\n        centerImage: true,\r\n    };\r\n\r\n    render() {\r\n        var imageSettingsCode = this.state.includeImage\r\n            ? `\r\n  imageSettings={{\r\n    src: \"${this.state.imageSrc}\",\r\n    x: ${this.state.centerImage ? 'null' : this.state.imageX},\r\n    y: ${this.state.centerImage ? 'null' : this.state.imageY},\r\n    height: ${this.state.imageH},\r\n    width: ${this.state.imageW},\r\n    excavate: ${this.state.imageExcavate},\r\n  }}`\r\n            : '';\r\n        var code = `<QRCode\r\n  value={\"${this.state.value}\"}\r\n  size={${this.state.size}}\r\n  bgColor={\"${this.state.bgColor}\"}\r\n  fgColor={\"${this.state.fgColor}\"}\r\n  level={\"${this.state.level}\"}\r\n  includeMargin={${this.state.includeMargin}}\r\n  renderAs={\"${this.state.renderAs}\"}${imageSettingsCode}\r\n/>`;\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <label>\r\n                        Size(px):\r\n                        <br />\r\n                        <input\r\n                            type=\"number\"\r\n                            onChange={(e) =>\r\n                                this.setState({size: parseInt(e.target.value, 10) || 0})\r\n                            }\r\n                            value={this.state.size}\r\n                        />\r\n                    </label>\r\n                </div>\r\n                <div>\r\n                    <label>\r\n                        Background Color:\r\n                        <br />\r\n                        <input\r\n                            type=\"color\"\r\n                            onChange={(e) => this.setState({bgColor: e.target.value})}\r\n                            value={this.state.bgColor}\r\n                        />\r\n                    </label>\r\n                </div>\r\n                <div>\r\n                    <label>\r\n                        Foreground Color:\r\n                        <br />\r\n                        <input\r\n                            type=\"color\"\r\n                            onChange={(e) => this.setState({fgColor: e.target.value})}\r\n                            value={this.state.fgColor}\r\n                        />\r\n                    </label>\r\n                </div>\r\n                <div>\r\n                    <label>\r\n                        Error Level:\r\n                        <br />\r\n                        <select\r\n                            onChange={(e) => this.setState({level: e.target.value})}\r\n                            value={this.state.level}>\r\n                            <option value=\"L\">L</option>\r\n                            <option value=\"M\">M</option>\r\n                            <option value=\"Q\">Q</option>\r\n                            <option value=\"H\">H</option>\r\n                        </select>\r\n                    </label>\r\n                </div>\r\n                <div>\r\n                    <label>\r\n                        Include Margin:\r\n                        <br />\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            checked={this.state.includeMargin}\r\n                            onChange={(e) => this.setState({includeMargin: e.target.checked})}\r\n                        />\r\n                    </label>\r\n                </div>\r\n                <div>\r\n                    <label>\r\n                        Render As:\r\n                        <br />\r\n                        <select\r\n                            onChange={(e) => this.setState({renderAs: e.target.value})}\r\n                            value={this.state.renderAs}>\r\n                            <option value=\"svg\">SVG</option>\r\n                            <option value=\"canvas\">Canvas</option>\r\n                        </select>\r\n                    </label>\r\n                </div>\r\n                <div>\r\n                    <label>\r\n                        Value:\r\n                        <br />\r\n                        <textarea\r\n                            rows=\"6\"\r\n                            cols=\"80\"\r\n                            onChange={(e) => this.setState({value: e.target.value})}\r\n                            value={this.state.value}\r\n                        />\r\n                    </label>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>\r\n                        Include Image:\r\n                        <br />\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            checked={this.state.includeImage}\r\n                            onChange={(e) => this.setState({includeImage: e.target.checked})}\r\n                        />\r\n                    </label>\r\n                </div>\r\n\r\n                <fieldset disabled={!this.state.includeImage}>\r\n                    <legend>Image Settings</legend>\r\n\r\n                    <div>\r\n                        <label>\r\n                            Source:\r\n                            <br />\r\n                            <input\r\n                                type=\"text\"\r\n                                onChange={(e) => this.setState({imageSrc: e.target.value})}\r\n                                value={this.state.imageSrc}\r\n                            />\r\n                        </label>\r\n                    </div>\r\n                    <div>\r\n                        <label>\r\n                            Image Width: {this.state.imageW}\r\n                            <br />\r\n                            <input\r\n                                type=\"number\"\r\n                                value={this.state.imageW}\r\n                                onChange={(e) =>\r\n                                    this.setState({imageW: parseInt(e.target.value, 10)})\r\n                                }\r\n                            />\r\n                        </label>\r\n                    </div>\r\n                    <div>\r\n                        <label>\r\n                            Image Height: {this.state.imageH}\r\n                            <br />\r\n                            <input\r\n                                type=\"number\"\r\n                                value={this.state.imageH}\r\n                                onChange={(e) =>\r\n                                    this.setState({imageH: parseInt(e.target.value, 10)})\r\n                                }\r\n                            />\r\n                        </label>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label>\r\n                            Center Image:\r\n                            <br />\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                checked={this.state.centerImage}\r\n                                onChange={(e) => this.setState({centerImage: e.target.checked})}\r\n                            />\r\n                        </label>\r\n                    </div>\r\n                    <fieldset disabled={this.state.centerImage}>\r\n                        <legend>Image Settings</legend>\r\n                        <div>\r\n                            <label>\r\n                                Image X: {this.state.imageX}\r\n                                <br />\r\n                                <input\r\n                                    type=\"range\"\r\n                                    min={0}\r\n                                    max={this.state.size - this.state.imageW}\r\n                                    value={this.state.imageX}\r\n                                    onChange={(e) =>\r\n                                        this.setState({imageX: parseInt(e.target.value, 10)})\r\n                                    }\r\n                                />\r\n                            </label>\r\n                        </div>\r\n                        <div>\r\n                            <label>\r\n                                Image Y: {this.state.imageY}\r\n                                <br />\r\n                                <input\r\n                                    type=\"range\"\r\n                                    min={0}\r\n                                    max={this.state.size - this.state.imageH}\r\n                                    value={this.state.imageY}\r\n                                    onChange={(e) =>\r\n                                        this.setState({imageY: parseInt(e.target.value, 10)})\r\n                                    }\r\n                                />\r\n                            </label>\r\n                        </div>\r\n                    </fieldset>\r\n                    <div>\r\n                        <label>\r\n                            Excavate (\"dig\" foreground to nearest whole module):\r\n                            <br />\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                checked={this.state.imageExcavate}\r\n                                onChange={(e) =>\r\n                                    this.setState({imageExcavate: e.target.checked})\r\n                                }\r\n                            />\r\n                        </label>\r\n                    </div>\r\n                </fieldset>\r\n\r\n                <div>\r\n                    <label>\r\n                        Use it:\r\n                        <br />\r\n                        <textarea\r\n                            rows={code.split('\\n').length}\r\n                            cols=\"80\"\r\n                            readOnly={true}\r\n                            value={code}\r\n                        />\r\n                    </label>\r\n                </div>\r\n\r\n                <QRCode\r\n                    value={this.state.value}\r\n                    size={this.state.size}\r\n                    fgColor={this.state.fgColor}\r\n                    bgColor={this.state.bgColor}\r\n                    level={this.state.level}\r\n                    renderAs={this.state.renderAs}\r\n                    includeMargin={this.state.includeMargin}\r\n                    imageSettings={\r\n                        this.state.includeImage\r\n                            ? {\r\n                                src: this.state.imageSrc,\r\n                                height: this.state.imageH,\r\n                                width: this.state.imageW,\r\n                                x: this.state.centerImage ? null : this.state.imageX,\r\n                                y: this.state.centerImage ? null : this.state.imageY,\r\n                                excavate: this.state.imageExcavate,\r\n                            }\r\n                            : null\r\n                    }\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"],"sourceRoot":""}