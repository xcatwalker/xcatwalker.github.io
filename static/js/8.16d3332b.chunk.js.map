{"version":3,"sources":["AboutReact/Component/PriceInput.js"],"names":["PriceInput","props","React","Component"],"mappings":"+KAEMA,E,kDACF,WAAYC,GAAO,uCACTA,G,mGAQN,OACI,6BACI,6BAAM,k4E,GAZGC,IAAMC,WAkGhBH","file":"static/js/8.16d3332b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass PriceInput extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n\r\n    componentWillMount(){\r\n\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div >\r\n                <pre>{'import React from \"react\";\\n' +\r\n                'import {Input} from \"antd\";\\n' +\r\n                '\\n' +\r\n                'class PriceInput extends React.Component {\\n' +\r\n                '    handleNumberChange = e => {\\n' +\r\n                '        const {type}= this.props;\\n' +\r\n                '        let number;\\n' +\r\n                '\\n' +\r\n                '        if(type===\\'money\\'){\\n' +\r\n                '            let regExp = /^[0-9.]*$/;\\n' +\r\n                '            number = e.target.value;\\n' +\r\n                '            // let minimumGradient = Number(localStorage.getItem(\\'minimumGradient\\'));\\n' +\r\n                '            let minimumGradient = this.props.minimumGradient||100;\\n' +\r\n                '            let length = 4;\\n' +\r\n                '            if(minimumGradient==100){\\n' +\r\n                '                length = 2;\\n' +\r\n                '            }else if(minimumGradient==10){\\n' +\r\n                '                length = 3;\\n' +\r\n                '            }else if(minimumGradient==1){\\n' +\r\n                '                length = 4;\\n' +\r\n                '            }\\n' +\r\n                '            if(!regExp.test(number)){\\n' +\r\n                '                return;\\n' +\r\n                '            }\\n' +\r\n                '            if(number.includes(\\'.\\')){\\n' +\r\n                '                let fontnumber = number.split(\\'.\\')[0];\\n' +\r\n                '                let backnumber =  number.split(\\'.\\')[1];\\n' +\r\n                '                if(backnumber.length>length){\\n' +\r\n                '                    return\\n' +\r\n                '                }\\n' +\r\n                '                if(fontnumber.length>8){\\n' +\r\n                '                    return\\n' +\r\n                '                }\\n' +\r\n                '            }else{\\n' +\r\n                '                if(number.length>8){\\n' +\r\n                '                    return;\\n' +\r\n                '                }\\n' +\r\n                '            }\\n' +\r\n                '        }else{\\n' +\r\n                '            if(e.target.value!=\\'\\'){\\n' +\r\n                '                number = parseInt(e.target.value || 0, 10);\\n' +\r\n                '                if (isNaN(number)) {\\n' +\r\n                '                    return;\\n' +\r\n                '                };\\n' +\r\n                '                if(String(number).length>8){\\n' +\r\n                '                    return;\\n' +\r\n                '                };\\n' +\r\n                '            }else{\\n' +\r\n                '                number = \\'\\';\\n' +\r\n                '            }\\n' +\r\n                '\\n' +\r\n                '        }\\n' +\r\n                '\\n' +\r\n                '        this.triggerChange(number+\\'\\');\\n' +\r\n                '    };\\n' +\r\n                '\\n' +\r\n                '    triggerChange = changedValue => {\\n' +\r\n                '        const { onChange, value } = this.props;\\n' +\r\n                '        if (onChange) {\\n' +\r\n                '            onChange(changedValue);\\n' +\r\n                '        }\\n' +\r\n                '    };\\n' +\r\n                '    render(){\\n' +\r\n                '        const { size, value ,style,addonAfter,className,placeholder} = this.props;\\n' +\r\n                '        return(\\n' +\r\n                '            <span>\\n' +\r\n                '                <Input\\n' +\r\n                '                    className={className}\\n' +\r\n                '                    type=\"text\"\\n' +\r\n                '                    size={size}\\n' +\r\n                '                    style={style}\\n' +\r\n                '                    value={value}\\n' +\r\n                '                    addonAfter={addonAfter}\\n' +\r\n                '                    placeholder={placeholder}\\n' +\r\n                '                    onChange={this.handleNumberChange}\\n' +\r\n                '                />\\n' +\r\n                '            </span>\\n' +\r\n                '        )\\n' +\r\n                '    }\\n' +\r\n                '}\\n' +\r\n                'export default PriceInput;\\n'}</pre>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default PriceInput;\r\n"],"sourceRoot":""}