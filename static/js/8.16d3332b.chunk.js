(this["webpackJsonpmy-react-app"]=this["webpackJsonpmy-react-app"]||[]).push([[8],{226:function(n,e,t){"use strict";t.r(e);var r=t(32),a=t(33),i=t(35),l=t(34),u=t(0),m=t.n(u),s=function(n){Object(i.a)(t,n);var e=Object(l.a)(t);function t(n){return Object(r.a)(this,t),e.call(this,n)}return Object(a.a)(t,[{key:"componentWillMount",value:function(){}},{key:"render",value:function(){return m.a.createElement("div",null,m.a.createElement("pre",null,"import React from \"react\";\nimport {Input} from \"antd\";\n\nclass PriceInput extends React.Component {\n    handleNumberChange = e => {\n        const {type}= this.props;\n        let number;\n\n        if(type==='money'){\n            let regExp = /^[0-9.]*$/;\n            number = e.target.value;\n            // let minimumGradient = Number(localStorage.getItem('minimumGradient'));\n            let minimumGradient = this.props.minimumGradient||100;\n            let length = 4;\n            if(minimumGradient==100){\n                length = 2;\n            }else if(minimumGradient==10){\n                length = 3;\n            }else if(minimumGradient==1){\n                length = 4;\n            }\n            if(!regExp.test(number)){\n                return;\n            }\n            if(number.includes('.')){\n                let fontnumber = number.split('.')[0];\n                let backnumber =  number.split('.')[1];\n                if(backnumber.length>length){\n                    return\n                }\n                if(fontnumber.length>8){\n                    return\n                }\n            }else{\n                if(number.length>8){\n                    return;\n                }\n            }\n        }else{\n            if(e.target.value!=''){\n                number = parseInt(e.target.value || 0, 10);\n                if (isNaN(number)) {\n                    return;\n                };\n                if(String(number).length>8){\n                    return;\n                };\n            }else{\n                number = '';\n            }\n\n        }\n\n        this.triggerChange(number+'');\n    };\n\n    triggerChange = changedValue => {\n        const { onChange, value } = this.props;\n        if (onChange) {\n            onChange(changedValue);\n        }\n    };\n    render(){\n        const { size, value ,style,addonAfter,className,placeholder} = this.props;\n        return(\n            <span>\n                <Input\n                    className={className}\n                    type=\"text\"\n                    size={size}\n                    style={style}\n                    value={value}\n                    addonAfter={addonAfter}\n                    placeholder={placeholder}\n                    onChange={this.handleNumberChange}\n                />\n            </span>\n        )\n    }\n}\nexport default PriceInput;\n"))}}]),t}(m.a.Component);e.default=s}}]);
//# sourceMappingURL=8.16d3332b.chunk.js.map